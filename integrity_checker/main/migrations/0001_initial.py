# Generated by Django 5.2.1 on 2025-05-15 06:14

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AILogEntryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_version', models.CharField(max_length=15)),
                ('is_response', models.BooleanField()),
                ('res_text', models.JSONField()),
                ('is_request', models.BooleanField()),
                ('req_prompt', models.TextField()),
                ('req_token_length', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'AI log entry',
                'verbose_name_plural': 'AI log entries',
            },
        ),
        migrations.CreateModel(
            name='NotationMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(max_length=100, unique=True)),
                ('modality', models.CharField(max_length=10)),
                ('side', models.CharField(max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'notation',
                'verbose_name_plural': 'notations',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'submission',
                'verbose_name_plural': 'submissions',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_entity', models.CharField(max_length=20)),
                ('second_entity', models.CharField(max_length=20)),
                ('first_modality', models.CharField(max_length=10)),
                ('second_modality', models.CharField(max_length=10)),
                ('relationship_name', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ai_log_entry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.ailogentrymodel')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.submission')),
            ],
            options={
                'verbose_name': 'knowledge base',
                'verbose_name_plural': 'knowledge bases',
            },
        ),
        migrations.CreateModel(
            name='MismatchModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ai_log_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ailogentrymodel')),
            ],
            options={
                'verbose_name': 'mismatch',
                'verbose_name_plural': 'mismatches',
            },
        ),
        migrations.CreateModel(
            name='ProduceModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('kb_first_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='produce_first_entities', to='main.knowledgebase')),
                ('kb_second_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='produce_second_entities', to='main.knowledgebase')),
                ('mismatch_ai_log_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='produce_mismatch_ai_log_entries', to='main.mismatchmodel')),
                ('mismatch_created_at', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='produce_mismatch_created_ats', to='main.mismatchmodel')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.submission')),
            ],
            options={
                'verbose_name': 'produce',
                'verbose_name_plural': 'produce',
            },
        ),
        migrations.CreateModel(
            name='MapInto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('first_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='first_entities', to='main.knowledgebase')),
                ('second_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='second_entities', to='main.knowledgebase')),
                ('symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.notationmapping')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.submission')),
            ],
            options={
                'verbose_name': 'map into',
                'verbose_name_plural': 'map into',
            },
        ),
        migrations.AddField(
            model_name='ailogentrymodel',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.submission'),
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.AddField(
            model_name='submission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.usermodel'),
        ),
        migrations.AddConstraint(
            model_name='mismatchmodel',
            constraint=models.UniqueConstraint(fields=('ai_log_entry', 'created_at'), name='unique_mismatch_composite_key'),
        ),
        migrations.AddConstraint(
            model_name='producemodel',
            constraint=models.UniqueConstraint(fields=('submission', 'mismatch_ai_log_entry', 'mismatch_created_at', 'kb_first_entity', 'kb_second_entity'), name='unique_ai_log_entry_timestamp'),
        ),
        migrations.AddConstraint(
            model_name='mapinto',
            constraint=models.UniqueConstraint(fields=('submission', 'symbol', 'first_entity', 'second_entity'), name='unique_mi_composite_key'),
        ),
        migrations.AddConstraint(
            model_name='knowledgebase',
            constraint=models.UniqueConstraint(fields=('first_entity', 'second_entity', 'submission'), name='unique_kb_composite_key'),
        ),
    ]
